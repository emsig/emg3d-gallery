
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorials/mapping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_tutorials_mapping.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorials_mapping.py:


02. Model property mapping
==========================


Physical rock properties (and their units) can be a tricky thing. And `emg3d`
is no difference in this respect. It was first developed for oil and gas,
having resistive bodies in mind. You will therefore find that the documentation
often talks about resistivity (Ohm.m). However, internally the computation is
carried out in conductivities (S/m), so resistivities are converted into
conductivities internally. For the simple forward model this is not a big
issue, as the output is simply the electromagnetic field. However, moving over
to optimization makes things more complicated, as the gradient of the misfit
function, for instance, depends on the parametrization.

Since `emg3d v0.12.0` it is therefore possible to define a
:class:`emg3d.models.Model` in different ways, thanks to different maps,
defined with the parameter ``mapping``. Currently implemented are six different
maps:

- ``'Resistivity'``: :math:`\rho` (Ohm.m), the default;
- ``'LgResistivity'``: :math:`\log_{10}(\rho)`;
- ``'LnResistivity'``: :math:`\log_e(\rho)`;
- ``'Conductivity'``: :math:`\sigma` (S/m);
- ``'LgConductivity'``: :math:`\log_{10}(\sigma)`;
- ``'LnConductivity'``: :math:`\log_e(\sigma)`.

We take here the model from
:ref:`sphx_glr_gallery_tutorials_total_vs_ps_field.py` and map it once as
``'LgResistivity'`` and once as ``'LgConductivity'``, and verify that the
resulting electric field is the same.

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: Python

    import emg3d
    import numpy as np
    import matplotlib.pyplot as plt
    plt.style.use('bmh')








.. GENERATED FROM PYTHON SOURCE LINES 40-42

Survey
------

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: Python


    src = [0, 0, -1950, 0, 0]   # x-dir. source at the origin, 50 m above seafloor
    off = np.arange(5, 81)*100  # Offsets
    rec = [off, off*0, -2000]   # In-line receivers on the seafloor
    res = [0.3, 1]              # 1D resistivities (Ohm.m): [water, background]
    freq = 1.0                  # Frequency (Hz)








.. GENERATED FROM PYTHON SOURCE LINES 50-55

Mesh
----

We create quite a coarse grid (100 m minimum cell width), to have reasonable
fast computation times.

.. GENERATED FROM PYTHON SOURCE LINES 55-67

.. code-block:: Python

    grid = emg3d.construct_mesh(
            frequency=freq,
            min_width_limits=100.0,
            properties=[res[0], res[1], res[1], res[0]],
            center=(src[0], src[1], -2000),
            domain=([-100, 8100], [-500, 500], [-3500, -1500]),
            center_on_edge=True,
            verb=0,
    )
    grid







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table>
      <tr>
        <td style='font-weight: bold; font-size: 1.2em; text-align: center;' colspan='3'>TensorMesh</td>
        <td style='font-size: 1.2em; text-align: center;'colspan='4'>73,728 cells</td>
      </tr>
      <tr>
        <th></th>
        <th></th>
        <th colspan='2' style='padding: 5px 20px 5px 20px;'>MESH EXTENT</th>
        <th colspan='2' style='padding: 5px 20px 5px 20px;'>CELL WIDTH</th>
        <th style='padding: 5px 20px 5px 20px;'>FACTOR</th>
      </tr>
      <tr>
        <th style='padding: 5px 20px 5px 20px;'>dir</th>
        <th style='padding: 5px 20px 5px 20px;'>nC</th>
        <th style='padding: 5px 20px 5px 20px;'>min</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
        <th style='padding: 5px 20px 5px 20px;'>min</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
        <th style='padding: 5px 20px 5px 20px;'>max</th>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>x</td>
        <td style='padding: 5px 20px 5px 20px;'>96</td>
        <td style='padding: 5px 20px 5px 20px;'>-3,303.39</td>
        <td style='padding: 5px 20px 5px 20px;'>11,303.39</td>
        <td style='padding: 5px 20px 5px 20px;'>100.00</td>
        <td style='padding: 5px 20px 5px 20px;'>996.95</td>
        <td style='padding: 5px 20px 5px 20px;'>1.39</td>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>y</td>
        <td style='padding: 5px 20px 5px 20px;'>24</td>
        <td style='padding: 5px 20px 5px 20px;'>-3,703.39</td>
        <td style='padding: 5px 20px 5px 20px;'>3,703.39</td>
        <td style='padding: 5px 20px 5px 20px;'>100.00</td>
        <td style='padding: 5px 20px 5px 20px;'>996.95</td>
        <td style='padding: 5px 20px 5px 20px;'>1.39</td>
      </tr>
      <tr>
        <td style='padding: 5px 20px 5px 20px;'>z</td>
        <td style='padding: 5px 20px 5px 20px;'>32</td>
        <td style='padding: 5px 20px 5px 20px;'>-7,512.73</td>
        <td style='padding: 5px 20px 5px 20px;'>240.89</td>
        <td style='padding: 5px 20px 5px 20px;'>100.00</td>
        <td style='padding: 5px 20px 5px 20px;'>1,344.36</td>
        <td style='padding: 5px 20px 5px 20px;'>1.45</td>
      </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 68-70

Define resistivities
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 70-82

.. code-block:: Python


    # Layered_background
    res_x = np.ones(grid.n_cells)*res[0]            # Water resistivity
    res_x[grid.cell_centers[:, 2] < -2000] = res[1]  # Background resistivity

    # Include the target
    xx = (grid.cell_centers[:, 0] >= 0) & (grid.cell_centers[:, 0] <= 6000)
    yy = abs(grid.cell_centers[:, 1]) <= 500
    zz = (grid.cell_centers[:, 2] > -3500)*(grid.cell_centers[:, 2] < -3000)

    res_x[xx*yy*zz] = 100.  # Target resistivity








.. GENERATED FROM PYTHON SOURCE LINES 83-85

Create ``LgResistivity`` and ``LgConductivity`` models
------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 85-113

.. code-block:: Python


    # Create log10-res model
    model_lg_res = emg3d.Model(
            grid, property_x=np.log10(res_x), mapping='LgResistivity')

    # Create log10-con model
    model_lg_con = emg3d.Model(
            grid, property_x=np.log10(1/res_x), mapping='LgConductivity')

    # Plot the models
    fig, axs = plt.subplots(1, 2, figsize=(9, 6), constrained_layout=True)

    # log10-res
    f0 = grid.plot_slice(model_lg_res.property_x, v_type='CC',
                         normal='Y', ax=axs[0], clim=[-2, 2])
    axs[0].set_title('Resistivity (Ohm.m); log10-scale')
    axs[0].set_xlim([-1000, 8000])
    axs[0].set_ylim([-4000, -1500])

    # log10-con
    f1 = grid.plot_slice(model_lg_con.property_x, v_type='CC',
                         normal='Y', ax=axs[1], clim=[-2, 2])
    axs[1].set_title('Conductivity (S/m); log10-scale')
    axs[1].set_xlim([-1000, 8000])
    axs[1].set_ylim([-4000, -1500])

    fig.colorbar(f0[0], ax=axs, orientation='horizontal', fraction=0.1)




.. image-sg:: /gallery/tutorials/images/sphx_glr_mapping_001.png
   :alt: Resistivity (Ohm.m); log10-scale, Conductivity (S/m); log10-scale
   :srcset: /gallery/tutorials/images/sphx_glr_mapping_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 114-116

Compute electric fields
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 116-131

.. code-block:: Python


    source = emg3d.TxElectricDipole(coordinates=src)
    solver_opts = {
        'source': source,
        'frequency': freq,
        'verb': 1,
    }

    efield_lg_res = emg3d.solve_source(model_lg_res, **solver_opts)
    efield_lg_con = emg3d.solve_source(model_lg_con, **solver_opts)

    # Extract responses at receiver locations.
    rec_lg_res = efield_lg_res.get_receiver((*rec, 0, 0))
    rec_lg_con = efield_lg_con.get_receiver((*rec, 0, 0))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    :: emg3d :: 8.9e-07; 1(4); 0:00:02; CONVERGED
    :: emg3d :: 8.9e-07; 1(4); 0:00:02; CONVERGED




.. GENERATED FROM PYTHON SOURCE LINES 132-134

Compare the two results
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 134-151

.. code-block:: Python


    fig, ax = plt.subplots(1, 1, constrained_layout=True)
    fig.suptitle('Comparison')

    # Log_10(resistivity)-model.
    ax.plot(off/1e3, rec_lg_res.real, 'C0', label='Real[log10(ρ)]-model')
    ax.plot(off/1e3, rec_lg_res.imag, 'C1-', label='Imag[log10(ρ)]-model')

    # Log_10(conductivity)-model.
    ax.plot(off/1e3, rec_lg_con.real, 'C2-.', label='Real[log10(σ)]-model')
    ax.plot(off/1e3, rec_lg_con.imag, 'C3-.', label='Imag[log10(σ)]-model')
  
    ax.set_xlabel('Offset (km)')
    ax.set_ylabel('Ex (V/m)')
    ax.set_yscale('symlog', linthresh=1e-17)
    ax.legend()




.. image-sg:: /gallery/tutorials/images/sphx_glr_mapping_002.png
   :alt: Comparison
   :srcset: /gallery/tutorials/images/sphx_glr_mapping_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 152-154

.. code-block:: Python


    emg3d.Report()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='border: 1.5px solid;'>
      <tr>
         <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 1px solid;' colspan='6'>Thu Jul 04 15:33:22 2024 CEST</td>
      </tr>
      <tr>
        <td style='text-align: right; border: 1px solid;'>OS</td>
        <td style='text-align: left; border: 1px solid;'>Linux (Ubuntu 22.04)</td>
        <td style='text-align: right; border: 1px solid;'>CPU(s)</td>
        <td style='text-align: left; border: 1px solid;'>16</td>
        <td style='text-align: right; border: 1px solid;'>Machine</td>
        <td style='text-align: left; border: 1px solid;'>x86_64</td>
      </tr>
      <tr>
        <td style='text-align: right; border: 1px solid;'>Architecture</td>
        <td style='text-align: left; border: 1px solid;'>64bit</td>
        <td style='text-align: right; border: 1px solid;'>RAM</td>
        <td style='text-align: left; border: 1px solid;'>31.0 GiB</td>
        <td style='text-align: right; border: 1px solid;'>Environment</td>
        <td style='text-align: left; border: 1px solid;'>Python</td>
      </tr>
      <tr>
        <td style='text-align: right; border: 1px solid;'>File system</td>
        <td style='text-align: left; border: 1px solid;'>ext4</td>
      </tr>
      <tr>
         <td style='text-align: center; border: 1px solid;' colspan='6'>Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]</td>
      </tr>
      <tr>
        <td style='text-align: right; border: 1px solid;'>numpy</td>
        <td style='text-align: left; border: 1px solid;'>1.26.4</td>
        <td style='text-align: right; border: 1px solid;'>scipy</td>
        <td style='text-align: left; border: 1px solid;'>1.14.0</td>
        <td style='text-align: right; border: 1px solid;'>numba</td>
        <td style='text-align: left; border: 1px solid;'>0.60.0</td>
      </tr>
      <tr>
        <td style='text-align: right; border: 1px solid;'>emg3d</td>
        <td style='text-align: left; border: 1px solid;'>1.8.3</td>
        <td style='text-align: right; border: 1px solid;'>empymod</td>
        <td style='text-align: left; border: 1px solid;'>2.3.1</td>
        <td style='text-align: right; border: 1px solid;'>xarray</td>
        <td style='text-align: left; border: 1px solid;'>2024.6.1.dev31+g6c2d8c33</td>
      </tr>
      <tr>
        <td style='text-align: right; border: 1px solid;'>discretize</td>
        <td style='text-align: left; border: 1px solid;'>0.10.0</td>
        <td style='text-align: right; border: 1px solid;'>h5py</td>
        <td style='text-align: left; border: 1px solid;'>3.11.0</td>
        <td style='text-align: right; border: 1px solid;'>matplotlib</td>
        <td style='text-align: left; border: 1px solid;'>3.8.4</td>
      </tr>
      <tr>
        <td style='text-align: right; border: 1px solid;'>tqdm</td>
        <td style='text-align: left; border: 1px solid;'>4.66.4</td>
        <td style= border: 1px solid;'></td>
        <td style= border: 1px solid;'></td>
        <td style= border: 1px solid;'></td>
        <td style= border: 1px solid;'></td>
      </tr>
      <tr>
         <td style='text-align: center; border: 1px solid;' colspan='6'>Intel(R) oneAPI Math Kernel Library Version 2023.2-Product Build 20230613 for Intel(R) 64 architecture applications</td>
      </tr>
    </table>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.302 seconds)

**Estimated memory usage:**  44 MB


.. _sphx_glr_download_gallery_tutorials_mapping.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: mapping.ipynb <mapping.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: mapping.py <mapping.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
